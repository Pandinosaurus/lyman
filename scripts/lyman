#! /usr/bin/env python
import argparse

import matplotlib
matplotlib.use("Agg")

from lyman.frontend import execute_workflow


def add_subject(parser):
    parser.add_argument("-s", "--subject",
                        nargs="*",
                        metavar="id",
                        help="subject id(s)")


def add_session(parser):
    parser.add_argument("--session",
                        nargs="*",
                        metavar="sess",
                        help="scanning session(s) for single subject")


def add_experiment(parser):
    parser.add_argument("-e", "--experiment",
                        metavar="name",
                        help="experiment name")


def add_model(parser):
    parser.add_argument("-m", "--model",
                        metavar="name",
                        help="model name")


def add_execution(parser):
    parser.add_argument("-p", "--plugin",
                        metavar="name",
                        help="nipype execution plugin")
    parser.add_argument("-n", "--nprocs",
                        type=int,
                        metavar="number",
                        help="size of multiprocessing pool")
    parser.add_argument("-g", "--graph",
                        action="store_true",  # TODO make this take a filename
                        help="write graph instead of executing")
    parser.add_argument("-c", "--clear-cache",
                        action="store_true",
                        help="remove existing cache directory before running")
    parser.add_argument("--no-qc",
                        dest="qc", action="store_false",
                        help="don't connect qc nodes")

    # TODO add a force execution option that deletes the cache dir
    # (or sets nipype's always rerun functionality)


# TODO add debug mode that preserves cache directory and uneccessary outputs


if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog="lyman")
    subparsers = parser.add_subparsers(help="processing stage",
                                       dest="stage")

    # ---

    template = subparsers.add_parser("template",
                                     help="functional template definition")
    add_subject(template)
    add_execution(template)

    # ---

    preproc = subparsers.add_parser("preproc",
                                    help="functional preprocessing")
    add_subject(preproc)
    add_session(preproc)
    add_experiment(preproc)
    add_execution(preproc)

    # ---

    # TODO a nice API would be something like model, model-fit, and model-res
    # We typically will want to do both, but want flexibility not to
    model_all = subparsers.add_parser("model",
                                      help=("fit univariate GLM "
                                            "and estimate contrasts"))
    add_subject(model_all)
    add_experiment(model_all)
    add_model(model_all)
    add_session(model_all)
    add_execution(model_all)

    model_fit = subparsers.add_parser("model-fit",
                                      help="fit univariate GLM")
    add_subject(model_fit)
    add_experiment(model_fit)
    add_model(model_fit)
    add_session(model_fit)
    add_execution(model_fit)

    model_res = subparsers.add_parser("model-res",
                                      help="estimate univariate contrats")
    add_subject(model_res)
    add_experiment(model_res)
    add_model(model_res)
    add_execution(model_res)

    # ---

    args = parser.parse_args()

    execute_workflow(args)
